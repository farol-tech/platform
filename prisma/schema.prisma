// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    seed     = "node prisma/seed.ts"
}

datasource db {
    provider = "postgresql"
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    nome_fantasia   String
    email           String    @unique
    senha           String
    cnpj            String    @unique
    estado          String
    endereco        String
    website         String?
    emailVerificado Boolean   @default(false)
    image           String?
    accounts        Account[]
    models          Modelo[]
    sessions        Session[]
    previsoes       Previsao[]
    produtos        Produto[]
}

model ValidationStatus {
    id              String    @id @default(cuid())
    email           String    @unique
    userID          String    @unique
    code            Int
    tries           Int       
    timeoutCounter  Int

}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Modelo {
    id              String    @id @default(cuid())
    nome_modelo     String
    id_produto      String
    UserId          String
    user            User    @relation(fields: [UserId], references: [id], onDelete: Cascade)
    produto         Produto    @relation(fields: [id_produto], references: [id], onDelete: Cascade)
    previsoes       Previsao[]
    inventarios     Inventario[]
}

model Previsao {
    id              String    @id @default(cuid())
    nome_modelo     String
    id_modelo       String
    modelo          Modelo @relation(fields: [id_modelo], references: [id], onDelete: Cascade)
    id_produto      String
    UserId          String
    data_previsao   DateTime
    data_feito      DateTime
    valor           Float
    produto         Produto    @relation(fields: [id_produto], references: [id], onDelete: Cascade)
    user            User    @relation(fields: [UserId], references: [id], onDelete: Cascade)
}

model Produto {
    id              String    @id @default(cuid())
    UserId          String
    nome_produto    String
    id_unidade      String
    user            User    @relation(fields: [UserId], references: [id], onDelete: Cascade)
    unidade         Unidade @relation(fields: [id_unidade], references: [id], onDelete: Cascade)
    previsoes       Previsao[]
    modelos         Modelo[]
    inventarios     Inventario[]
}

model Inventario {
    id              String    @id @default(cuid())
    id_modelo       String
    id_produto      String
    data_previsao   DateTime
    data_feito      DateTime
    valor           Float
    produto         Produto    @relation(fields: [id_produto], references: [id], onDelete: Cascade)
    modelo          Modelo @relation(fields: [id_modelo], references: [id], onDelete: Cascade)

}

model Unidade{
    id String   @id @default(cuid())
    nome_unidade String
    produtos Produto[]
}

model Forms {
    id String   @id @default(cuid())
    UserId String
    resp1 String
    resp2 String
    resp4 String
    resp5 String
    resp6 String
}
